#summary A quick tutorial about downloading, building and running D-MASON.
#labels Phase-Deploy

Last updated: 30 Apr 2013, D-MASON version 2.1

=Building D-Mason from source=

<wiki:toc />

The following tutorial will guide you through the download and setup of the D-MASON project into Eclipse. Of course you can use any IDE of your choice, or no one at all.

Please note that in order to build D-MASON you will need to download ad setup MASON.

==Prerequisites==
  * [http://www.eclipse.org/ Eclipse "Helios" or newer].
  * [http://subclipse.tigris.org/ Subversion plugin for Eclipse].
  
==Downloading MASON as Eclipse Project==
[http://cs.gmu.edu/~eclab/projects/mason/ MASON] is the non-distributed toolkit for multi-agent simulation developed by the MASON University. You can download the latest version from the SVN Repository.

Here we will see how to download MASON and setup it as a new Eclipse project.

  # Download the MASON’s libraries (http://cs.gmu.edu/~eclab/projects/mason/libraries.tar.gz or http://cs.gmu.edu/~eclab/projects/mason/libraries.zip) and unzip them in a directory of your choice.
  # Open menu "File" > "New" > "Project" .
  # Open folder "SVN" and select "Checkout Projects from SVN" .
  # Select "Create a new repository location".
  # Input MASON’s repository URL: http://mason.googlecode.com/svn/trunk/.
  # Select the "mason" entry and click "Next".
  # Select "Check out as a project configured using the New Project Wizard" and click "Finish".
  # Open folder "Java" and select "Java Project", then click "Next".
  # Name the project, click "Next".
  # Open the "Libraries" tab and click "Add external JARs...".
  # Select JAR files from the directory where you unzipped MASON’s libraries archive (the directory should contain itext, jcommon, jfreechart and jmf libraries) then click "Finish".
  # Click "OK" when the "Confirm overwrite" dialog appears and wait for Eclipse to download MASON.
  # You are ready to use MASON! You can run `sim.display.Console` if you want to execute MASON (running MASON is not needed for building nor running D-MASON).

==Downloading D-MASON as Eclipse Project==
  # Open menu "File" > "New" > "Project".
  # Open folder "SVN" and select "Checkout Projects from SVN" .
  # "Create a new repository location".
  # Input D-MASON’s repository URL: http://d-mason.googlecode.com/svn/trunk/.
  # Select the uppercase "DMASON" entry and click "Next".
  # Name the project and click "Finish".
  # You are now ready to build D-MASON.
  
==Building D-MASON==
D-MASON is meant to be deployed as a collection of jar files. A typical distribution consists in the following directory structure:

{{{
+ dmason
    |--+ apache-activemq-5.6.0
    |  \--- (...)
    |--+ libraries
    |  \--- (...)
    |--- dmason.jar
    |--- dmason-batch-wizard.jar
    |--- dmason-launcher.jar
    |--- dmason-master.jar
    |--- dmason-server.jar
    |--- dmason-worker.jar
    \--- dmason-worker-gui.jar
}}}

{{{dmason.jar}}} contains the D-MASON executable, while the other JARfiles are just  _shortcuts_ useful in order to launch the different D-MASON's components. DMASON can be built using the {{{build-all.xml}}} ANT script you will find in the project directory. Before launching it, please check these two lines on your file:

{{{
<property name="OutDir" value="${basedir}/build"></property>
<property name="MasonDir" value="${basedir}/../mason/"></property>
}}}

 * {{{OutDir}}} allows you to specify where to build D-MASON. If your {{{OutDir}}} is under {{{${basedir}}}} we suggest you to add {{{OutDir}}} to the exclude list (look for XML element {{{<fileset dir="${basedir}/">}}} under the {{{<jar destfile="${OutDir}/dmason.jar">}}} element).
 * {{{MasonDir}}} is required to successfully build D-MASON and *must point* to MASON project's home.

The ANT script will build the directory structure shown above. [https://code.google.com/p/d-mason/downloads/detail?name=apache-activemq-5.6.0.zip&can=2&q= Download out pre-configured version of Apache ActiveMQ] 5.6 and place it under {{{OutDir}}} so it respects the directory structure shown above.

You are now ready to launch D-MASON.

==Launching D-MASON==
D-MASON is built upon four components: an ActiveMQ server, one or more _Workers_, a _Master_ interface, a _Global Inspector_ (optional).

In this tutorial, we’ll setup a D-MASON simulation using two workers. Also, we will run all of the component on a single machine, but in a real simulation environment you  may want to run the server and every worker on different hosts.

===Launching the ActiveMQ server===
We offer a customized version of ActiveMQ (it differs from the official distribution just in the configuration) that you can [https://code.google.com/p/d-mason/downloads/detail?name=apache-activemq-5.6.0.zip&can=2&q= download from this site].
Extract the archive under your D-MASON's directory, so the latter one contains the {{{apache-activemq-5.6.0}}} directory.

The double-click on {{{dmason-server.jar}}} or launch via command line:

{{{
java -jar dmason-server.jar
}}}

===Exporting and running the Worker runnable JAR===
You can use the command-line or the GUI version of the worker. If you launch {{{dmason-worker-gui.jar}}} the GUI version will start. You must enter the IP address of the host running ActiveMQ and the port where ActiveMQ is listening.

You can also use the command-line versione by launching:

{{{
java -jar dmason-worker.jar 127.0.0.1 61616
}}}

Please note that we are passing two argument: the IP address of the host running ActiveMQ and the port where ActiveMQ is listening.

A {{{Ready to start!}}} message should appear, meaning the connection was successfull.

  
===Launching the Master===
  # Launch the master either by double-clicking {{{dmason-master.jar}} or by typing on your shell/command line:
{{{
java -jar dmason-master.java
}}}
  # You will be asked to select a worker JAR file. Select {{{dmason.jar}}}.
  # In the "Connection" panel input IP Address and Port of the host running ActiveMQ. Leave IP `127.0.0.1` if the Master and ActiveMQ are running on the same host; leave port `61616` if you didn’t change default ActiveMQ’s configuration. Click "Ok", a "Connectione stabilished" message will display, followed by "All workers are ready".
  # You can either run a simulation embedded with the default D-MASON distribution, or you can deploy a simulation JAR you made. In this tutorial we will run an embedded simulation. In the "Setting panel" leave the default parameters and click "Set". A pop-up message will confirm the success of the operation, and two "Simulation cell ready" messages will appear. 
  # You can now press the PLAY button to start the simulation, but first you may want to launch the Global Inspector.

===Launching the Global Inspector===
  # Launch the Global Inspector by either double-clicking {{dmason-inspector.jar}}} or entering in your shell/command-line:
{{{
java -jar dmason-inspector.jar
}}}
  # In the "Connection" panel you must input IP Address and Port of the host running ActiveMQ.
  # In "Simulation info" you must input the same simulation parameters set when you launched the simulation using the Master. Since we didn’t change anything, just click "Connect".
  # Click on the "Graphic" checkbox.
  # Open the Master window and start the simulation.
  # Open the Global Inspector window and behold the flock!